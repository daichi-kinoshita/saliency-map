/*****************************
Saliency Map library.

sm
{
class Saliency
class Saliency_M
}

*******************************/

#include <iostream>
#include <vector>
#include <opencv2/opencv.hpp>
#include <cmath>
#include "sm.hpp"

using namespace std;
using namespace cv;

/* gabor filter set */
const vecMat sm::Saliency::gabor_f = sm::makeGaborFilter();

sm::Saliency::Saliency(){}

sm::Saliency::Saliency(const Mat& img0, const Saliency* prev=NULL)
{
  /* set range [0.0-1.0] */
  Mat_<Vec3f> img = img0;
  normalizeRange(img);
  
  /* make gaussian pyramid */
  vecMat sigma = makeGaussianPyramid(img);

  /* output image size */
  sigma_size = sigma[SM_SIZE].size();

  /* feature maps */
  int h, w;
  for (int i=0;i<SCALES;i++) {
    
    vector<Mat_<float> > color;
    split(sigma[i], color);
    
    /* feature: intense */
    Mat_<float> tmpI = (color[0]+color[1]+color[2]) / 3.0f;
    I.push_back(tmpI);

    /* feature: color(red,blue,green,yellow) */
    h = sigma[i].rows;
    w = sigma[i].cols;

    double max_i;
    minMaxLoc(tmpI, NULL, &max_i);
    
    Mat_<float> r(h, w, 0.0f);
    Mat_<float> g(h, w, 0.0f);
    Mat_<float> b(h, w, 0.0f);
    
    for(int y=0;y<h;y++) {
      for(int x=0;x<w;x++) {
	if(tmpI(y, x) > 0.1f*max_i) {
	  r(y, x) = color[2](y, x) / tmpI(y, x);
	  g(y, x) = color[1](y, x) / tmpI(y, x);
	  b(y, x) = color[0](y, x) / tmpI(y, x);
	}
      }
    }
    
    Mat_<float> tmpR = max(0.0f, r-(g+b)/2);
    Mat_<float> tmpG = max(0.0f, g-(b+r)/2);
    Mat_<float> tmpB = max(0.0f, b-(r+g)/2);
    Mat_<float> tmpY = max(0.0f, (r+g)/2-abs(r-g)/2-b);
    R.push_back(tmpR);
    G.push_back(tmpG);
    B.push_back(tmpB);
    Y.push_back(tmpY);

    /* feature: orientation(0, pi/4, pi/2, 3pi/4) */
    Mat_<float> tmpO[4];
    for (int j=0;j<ORIENTS;j++) {
      
      filter2D(I[i], tmpO[j], -1, gabor_f[j]);
      normalizeRange(tmpO[j]);
      O[j].push_back(tmpO[j]);

    }

    /* shift image */
    /* Mat_<float> tmp(h, w, 0.0f);
    for (int j=0;j<ORIENTS;j++) {
      
      Point point;
      
      point.x = (int)(sigma[i].cols / 2.0) + SHIFT_X[j];
      point.y = (int)(sigma[i].rows / 2.0) + SHIFT_Y[j];
      
      getRectSubPix(tmpO[j], sigma[i].size(), point, tmp);

      S[j].push_back(tmp);
      }*/
      

    /* movie saliency */
    if (prev != NULL) {

      /*feature: flicker */
      F.push_back(abs(I[i] - prev->I[i]));

      /*feature: motion */
      
      Mat_<float> crnt_shift(h, w, 0.0f);
      Mat_<float> prv_shift(h, w, 0.0f);
      for (int j=0;j<ORIENTS;j++) {
	
	Point point;
	
	point.x = (int)(sigma[i].cols / 2.0) + SHIFT_X[j];
	point.y = (int)(sigma[i].rows / 2.0) + SHIFT_Y[j];
	
	getRectSubPix(O[i][j], sigma[i].size(), point, crnt_shift);
	getRectSubPix(prev->O[i][j], sigma[i].size(), point, prv_shift);

	M[j].push_back(abs(O[i][j]*prv_shift - prev->O[i][j]*crnt_shift));
      }

      /*M[0].push_back(tmpO[0]);
      M[1].push_back(tmpO[1]);
      M[2].push_back(tmpO[2]);
      M[3].push_back(tmpO[3]);*/
    } else {

      F.push_back(I[i]);

      M[0].push_back(tmpO[0]);
      M[1].push_back(tmpO[1]);
      M[2].push_back(tmpO[2]);
      M[3].push_back(tmpO[3]);		  
    }
  }
   
}


const vecMat sm::Saliency::makeGaussianPyramid(const Mat& sigma0)
{
  vector<Mat> sigma;
  sigma.push_back(sigma0);
    
  Mat tmp;
  for (int i=1;i<SCALES;i++) {
    pyrDown(sigma[i-1], tmp);
    sigma.push_back(tmp);
  }
  
  return sigma;
}

/*const Mat sm::makeGaussianFilter(void)
{
  Mat gaussian_f;

  Size ksize = Size(GAUSSIAN_SIZE, GAUSSIAN_SIZE);

  double tmp;
  double sum = 0;
  for (int i=-GAUSSIAN_RADIUS;i<GAUSSIAN_RADIUS;i++) {
    for (int j=-GAUSSIAN_RADIUS;j<GAUSSIAN_RADIUS;j++) {
      tmp = exp((i*i + j*j) / -2.0*GAUSSIAN_SIGMA*GAUSSIAN_SIGMA);
      gaussian_f.at<float>(i+GAUSSIAN_RADIUS, j+GAUSSIAN_RADIUS) = tmp;

      sum += tmp;
    }
  }

   for (int i=-GAUSSIAN_RADIUS;i<GAUSSIAN_RADIUS;i++) {
    for (int j=-GAUSSIAN_RADIUS;j<GAUSSIAN_RADIUS;j++) {
      gaussian_f.at<float>(i+GAUSSIAN_RADIUS, j+GAUSSIAN_RADIUS) /= sum;
    }
  }

  return gaussian_f;
  }*/

const vecMat sm::makeGaborFilter(void)
{
  vecMat gabor_f(4);
  
  Size ksize = Size(GABOR_SIZE, GABOR_SIZE);
  
  gabor_f[0] = getGaborKernel(ksize, GABOR_SIGMA, CV_PI * 0.00, GABOR_LAMBDA, 1.0, 0.0, CV_32F);
  gabor_f[1] = getGaborKernel(ksize, GABOR_SIGMA, CV_PI * 0.25, GABOR_LAMBDA, 1.0, 0.0, CV_32F);
  gabor_f[2] = getGaborKernel(ksize, GABOR_SIGMA, CV_PI * 0.50, GABOR_LAMBDA, 1.0, 0.0, CV_32F);
  gabor_f[3] = getGaborKernel(ksize, GABOR_SIGMA, CV_PI * 0.75, GABOR_LAMBDA, 1.0, 0.0, CV_32F);
  
  return gabor_f;
}
  
Mat sm::Saliency::centerSurround(const Mat& c, const Mat& s)
{
  Mat tmp_s(c.size(), c.type());
  resize(s, tmp_s, c.size());
  tmp_s = abs(tmp_s - c);

  return tmp_s;
}

vector<Mat> sm::Saliency::makeCSPyrmd(const vector<Mat>& f)
{
  vector<Mat> cs;
  
  for (int i=CENTER[0];i<=CENTER[1];i++) {    //(2-5),(2-6),(3-6),(3-7),(4-7),(4-8)
    for (int j=DELTA[0];j<=DELTA[1];j++) {
      Mat tmp = centerSurround(f[i], f[i+j]);
      cs.push_back(tmp);
    }
  }

  return cs;
}

vector<Mat> sm::Saliency::makeCSPyrmd(const vector<Mat>& f1, const vector<Mat>& f2)
{
  vector<Mat> cs;
  
  for (int i=CENTER[0];i<=CENTER[1];i++) {    //(2-5),(2-6),(3-6),(3-7),(4-7),(4-8)
    for (int j=DELTA[0];j<=DELTA[1];j++) {
      Mat_<float> c = f1[i] - f2[i];
      Mat_<float> s = f2[i+j] - f1[i+j]; 
      Mat tmp = centerSurround(c, s);
      cs.push_back(tmp);
    }
  }

  return cs;
}

void sm::Saliency::normalizeRange(Mat& img)
{
  double min, max;
  minMaxLoc(img, &min, &max);
  
  img -= min;
  if (min < max) {
    img /= max - min;
  }
}

void sm::Saliency::normalizePeak(Mat& img)
{
  int w = img.cols;
  int h = img.rows;
  
  double M = 1.0;
  normalizeRange(img);
  double m = 0.0;
  for(int y=0;y<h-STEP;y+=STEP) {
    for(int x=0;x<w-STEP;x+=STEP) {

      Mat roi(img, Rect(x, y, STEP, STEP));
      double max = 0.0;
      minMaxLoc(roi, NULL, &max);
      m += max;

    }
  }

  m /= (w/STEP) * (h/STEP);
  img *= (M-m) * (M-m); 
}

Mat sm::Saliency::getSaliencyMap(void)
{

  /* center surround operation */
  vecMat csI   = makeCSPyrmd(I);
  vecMat csRG  = makeCSPyrmd(R, G);
  vecMat csBY  = makeCSPyrmd(B, Y);
  vecMat cs000 = makeCSPyrmd(O[0]);
  vecMat cs045 = makeCSPyrmd(O[1]);
  vecMat cs090 = makeCSPyrmd(O[2]);
  vecMat cs135 = makeCSPyrmd(O[3]);
  vecMat csF   = makeCSPyrmd(F);

  /* conspicuity maps */
  Mat_<float> cnspI(sigma_size, 0.0f);
  Mat_<float> cnspC(sigma_size, 0.0f);
  Mat_<float> cnsp000(sigma_size, 0.0f);
  Mat_<float> cnsp045(sigma_size, 0.0f);
  Mat_<float> cnsp090(sigma_size, 0.0f);
  Mat_<float> cnsp135(sigma_size, 0.0f);
  Mat_<float> cnspF(sigma_size, 0.0f);

  for (int i=0;i<CS_NUM;i++) {
    normalizePeak(csI[i]);
    normalizePeak(csRG[i]);
    normalizePeak(csBY[i]);
    normalizePeak(cs000[i]);
    normalizePeak(cs045[i]);
    normalizePeak(cs090[i]);
    normalizePeak(cs135[i]);
    normalizePeak(csF[i]);

    resize(csI[i], csI[i], sigma_size, INTER_NEAREST);
    resize(csRG[i], csRG[i], sigma_size, INTER_NEAREST);
    resize(csBY[i], csBY[i], sigma_size, INTER_NEAREST);
    resize(cs000[i], cs000[i], sigma_size, INTER_NEAREST);
    resize(cs045[i], cs045[i], sigma_size, INTER_NEAREST);
    resize(cs090[i], cs090[i], sigma_size, INTER_NEAREST);
    resize(cs135[i], cs135[i], sigma_size, INTER_NEAREST);
    resize(csF[i], csF[i], sigma_size, INTER_NEAREST);

    cnspI   += csI[i];
    cnspC   += csRG[i] + csBY[i];
    cnsp000 += cs000[i];
    cnsp045 += cs045[i];
    cnsp090 += cs090[i];
    cnsp135 += cs135[i];
    cnspF   += csF[i];

  }
  
  normalizePeak(cnsp000);
  normalizePeak(cnsp045);
  normalizePeak(cnsp090);
  normalizePeak(cnsp135);
  Mat_<float> cnspO = cnsp000 + cnsp045 + cnsp090 + cnsp135;
  
  for (int i=0;i<ITERATION;i++) {
    normalizePeak(cnspI);
    normalizePeak(cnspC);
    normalizePeak(cnspO);
    normalizePeak(cnspF);
  }
    
  Mat saliency = 0.333 * ( cnspI + cnspC + cnspO + cnspF );
  
  normalizeRange(saliency);

  return saliency;
}

Mat sm::convertTo256(const Mat& img0)
{
  Mat img(img0.size(), CV_8UC3);

  for (int y=0;y<img0.rows;y++) {
    for (int x=0;x<img0.cols;x++) {
      int val = 255 * img0.at<float>(y, x);
      //img.at<unsigned char>(y, x) = val * 255;
      img.at<Vec3b>(y, x) = Vec3b(val, val, val);
    }
  }

  return img;
}

Mat sm::convertToHeatMap(const Mat& img0)
{
  Mat map(img0.size(), CV_8UC3);
  
  double val;
  int r, g, b;
  for (int y=0;y<img0.rows;y++) {
    for (int x=0;x<img0.cols;x++) {
      val = img0.at<float>(y, x);

      if (val < 0.0 || 1.0 < val) {
	r = 0.0;
	g = 0.0;
	b = 0.0;
      } else if (val <= 0.5) {
	r = 0.0;
	g = 255 * 2*val;
	b = 255 * (-2*val + 1);
      } else if (0.5 < val) {
	r = 255 * (2*val - 1);
	g = 255 * (-2*val + 2);
	b = 0.0;
      }

      map.at<Vec3b>(y, x) = Vec3b(b, g, r);
    }
  }

  return map;
}

Mat sm::setGazePoint(const Mat& img0, const Mat& sm)
{
  Mat img = img0;

  Point point;
  double max;
  minMaxLoc(sm, NULL, &max, NULL, &point);
  
  circle(img, point, 20, Scalar(0,200,0), 2, CV_AA);

  return img;
}
